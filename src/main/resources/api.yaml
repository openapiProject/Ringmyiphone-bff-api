openapi: "3.0.0"
info:
  description: "This is a Ring My IPHONE BFF service."
  version: 1.0.0
  title: Ring My Iphone BFF API Spec
  contact:
    email: "#ITVehicleServices@ehi.com"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  termsOfService: http://swagger.io/terms/
servers:
tags:
  - name: employee
    description: Search for employee using logonId
paths:
  /employee/{logonId}:
    get:
      tags:
        - employee
      summary: Retrieve employee information based on logonId
      description: Retrieves employee name based on logonId.
      operationId: getEmployee
      parameters:
        - name: logonId
          in: path
          description: Id of the employee that will be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/AcceptVersionHeader'
        - $ref: '#/components/parameters/XB3SpanId'
        - $ref: '#/components/parameters/XB3TraceId'
        - $ref: '#/components/parameters/JWTToken'
      responses:
        '200':
          $ref: '#/components/responses/200-OK-EmployeeResult'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '415':
          $ref: '#/components/responses/415-UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/500-ServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  /firebase/{userId}:
    get:
      tags:
        - getuser
      summary: service to get user from firebase store
      description: service to get user from firebase store based on user id
      operationId: getuser
      parameters:
        - name: userId
          in: path
          description: Id of the employee that will be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/AcceptVersionHeader'
        - $ref: '#/components/parameters/XB3SpanId'
        - $ref: '#/components/parameters/XB3TraceId'
        - $ref: '#/components/parameters/JWTToken'
      responses:
        '200':
          $ref: '#/components/responses/200-OK-UserResult'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '415':
          $ref: '#/components/responses/415-UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/500-ServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  /firebase/{userid}/create:
    post:
      tags:
        - createUser
      summary: insert user in firestore based on userid.
      description: insert user in firestore based on userid.
      operationId: createUser
      parameters:
        - name: userid
          in: path
          description: userid
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/AcceptVersionHeader'
        - $ref: '#/components/parameters/XB3SpanId'
        - $ref: '#/components/parameters/XB3TraceId'
        - $ref: '#/components/parameters/JWTToken'
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: insert User object successfully
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '415':
          $ref: '#/components/responses/415-UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/500-ServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
components:
  parameters:
    AcceptVersionHeader:
      name: Accept-Version
      in: header
      description: API version to use
      required: false
      schema:
        type: string
    JWTToken:
      name: Authorization
      description: JWT Token (add "Bearer" in front of the token)
      in: header
      required: false
      schema:
        type: string
    XB3SpanId:
      name: X-B3-SpanId
      description: Span Id, unique per request. Create new request for forwarding calls.
      in: header
      required: false
      schema:
        type: string
    XB3TraceId:
      name: X-B3-TraceId
      description: Trace Id,  unique per request trace. Forward the same Id to the subsequent calls.
      in: header
      required: false
      schema:
        type: string
    Content-Type:
      name: Content-Type
      description: Content-Type of the expected response
      in: header
      required: false
      schema:
        type: string
  responses:
    '200-OK-EmployeeResult':
      description: OK
      headers:
        XB3SpanId:
          description: Span Id, unique per request. Create new request for forwarding calls.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'
    '200-OK-UserResult':
      description: OK
      headers:
        XB3SpanId:
          description: Span Id, unique per request. Create new request for forwarding calls.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    '400-BadRequest':
      description: Invalid Request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    '404-NotFound':
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    '401-Unauthorized':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    '415-UnsupportedMediaType':
      description: Provided Media Type not supported
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    '500-ServerError':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    '503-ServiceUnavailable':
      description: Service Unavailable.
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per hour.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    'DefaultErrorResponse':
      description: Generic Error
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        locale:
          type: string
        localizedMessage:
          type: string
        paths:
          type: array
          items:
            type: string
        severity:
          type: string
        supportInformation:
          type: string
      required:
        - code
        - locale
        - localizedMessage
        - severity
    Employee:
      description: employee data
      type: object
      properties:
        firstName:
          type: string
          description: employee first name
          example: Justin
        middleInit:
          type: string
          description: employee middle initial
          example: R
        lastName:
          type: string
          description: employee last name
          example: Bays
        legacyJobTitle:
          type: string
          description: employee legacy job title
          example: Software Engineer
    User:
      description: User data
      type: object
      properties:
        firstname:
          type: string
          description: User first name
          example: Nick
        lastname:
          type: string
          description: employee last name
          example: Chang
        email:
          type: string
          description: email address
          example: test123@gmail.com